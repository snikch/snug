// Generated by CoffeeScript 1.6.1
(function() {
  var _this = this;

  this.Snug = (function() {

    function Snug(options) {
      var form, input, _i, _j, _len, _len1, _ref, _ref1;
      this.options = options != null ? options : {};
      _ref = this.options['form'] || document.getElementsByTagName('form');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        form = _ref[_i];
        _ref1 = form.getElementsByTagName('input');
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          input = _ref1[_j];
          this.replaceInput(input);
        }
      }
    }

    Snug.prototype.replaceInput = function(el) {
      if (el.getAttribute('type').toLowerCase() === 'file') {
        return new Snug.Input(el, this.options);
      }
    };

    return Snug;

  })();

  this.Snug.Input = (function() {

    function Input(el, options) {
      var _this = this;
      this.el = el;
      this.options = options != null ? options : {};
      this.didSelectFile = function() {
        return Input.prototype.didSelectFile.apply(_this, arguments);
      };
      this.render();
      this.bind();
    }

    Input.prototype.render = function() {
      this.hiddenInput = this.createNode('input', {
        type: 'hidden',
        name: this.el.name
      });
      this.el.parentElement.appendChild(this.hiddenInput);
      return this.el.name += "_input";
    };

    Input.prototype.bind = function() {
      return this.el.onchange = this.didSelectFile;
    };

    Input.prototype.didSelectFile = function() {
      if (this.el.files.length > 0) {
        return this.resizeFile(this.el.files[0]);
      }
    };

    Input.prototype.resizeFile = function(file) {
      var resizer,
        _this = this;
      if (!file.type.match(/image/i)) {
        return;
      }
      resizer = new Snug.Resizer(file, {
        width: this.options['width'] || 768,
        dimensions: this.options['dimensions']
      });
      return resizer.resize(function() {
        var newEl;
        resizer.placeInInput(_this.hiddenInput);
        newEl = _this.createNode("input", {
          type: "file"
        }, {
          id: _this.el.id,
          name: _this.el.name,
          className: _this.el.className
        });
        _this.el.parentElement.replaceChild(newEl, _this.el);
        _this.el = newEl;
        _this.bind();
        if (_this.options['imageload']) {
          return _this.options['imageload'](resizer.image(), _this.el);
        }
      });
    };

    Input.prototype.createNode = function(name, attrs) {
      var attr, node, value;
      if (attrs == null) {
        attrs = {};
      }
      node = document.createElement(name);
      for (attr in attrs) {
        value = attrs[attr];
        node.setAttribute(attr, value);
      }
      return node;
    };

    return Input;

  })();

  this.Snug.Resizer = (function() {

    function Resizer(file, options) {
      this.file = file;
      this.options = options != null ? options : {};
    }

    Resizer.prototype.resize = function(callback) {
      var _this = this;
      return this.loadImage(function() {
        var src, target;
        src = {
          width: _this.image().naturalWidth,
          height: _this.image().naturalHeight
        };
        if (_this.options['dimensions'] != null) {
          console.log("Getting dimensions");
          target = _this.options['dimensions'](src['width'], src['height']);
        } else {
          if (src['width'] > _this.options['width']) {
            target = {
              width: _this.options['width'],
              height: Math.round((_this.options['width'] / src['width']) * src['height'])
            };
          } else {
            target = src;
          }
        }
        console.log(target, _this.options);
        _this.resizeCanvas(target);
        return callback();
      });
    };

    Resizer.prototype.placeInInput = function(input) {
      return input.value = this.canvas().toDataURL(this.file.type, this.options['quality'] || 70);
    };

    Resizer.prototype.resizeCanvas = function(target) {
      this.canvas().width = target['width'];
      this.canvas().height = target['height'];
      return this.canvas().getContext('2d').drawImage(this.image(), 0, 0, target['width'], target['height']);
    };

    Resizer.prototype.canvas = function() {
      return this._canvas || (this._canvas = document.createElement('canvas'));
    };

    Resizer.prototype.image = function() {
      return this._image || (this._image = new Image());
    };

    Resizer.prototype.loadImage = function(callback) {
      var reader,
        _this = this;
      this.image().onload = callback;
      reader = new FileReader();
      reader.onload = function(e) {
        return _this.image().src = e.target.result;
      };
      return reader.readAsDataURL(this.file);
    };

    return Resizer;

  })();

}).call(this);
